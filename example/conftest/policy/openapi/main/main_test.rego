package openapi.main

test_recommended_policies_execute_by_default = true { assign(a, results) with input as {}; equal(count(a), count(recommended_policy_refs)) }
test_recommended_policies_with_ruleset_by_default = true { assign(ruleset, {"extends": ["spego:oas"]}); assign(a, results) with input as {} with data.openapi.ruleset as ruleset; equal(count(a), count(recommended_policy_refs)) }
test_recommended_policies_with_ruleset = true { assign(ruleset, {"extends": [["spego:oas", "recommended"]]}); assign(a, results) with input as {} with data.openapi.ruleset as ruleset; equal(count(a), count(recommended_policy_refs)) }
test_all_policies_with_ruleset = true { assign(ruleset, {"extends": [["spego:oas", "all"]]}); assign(a, results) with input as {} with data.openapi.ruleset as ruleset; equal(count(a), count(all_policy_refs)) }
test_ruleset_specifier_is_spectral_compatible = true { assign(ruleset, {"extends": [["spectral:oas", "all"]]}); assign(a, results) with input as {} with data.openapi.ruleset as ruleset; equal(count(a), count(all_policy_refs)) }
test_off_policies_with_ruleset = true { assign(ruleset, {"extends": [["spego:oas", "off"]]}); assign(a, results) with input as {} with data.openapi.ruleset as ruleset; equal(count(a), 0) }
test_enabled_policies_with_ruleset = true { assign(ruleset, {"extends": [["spego:oas", "off"]], "rules": {"openapi-tags": true}}); assign(a, results) with input as {} with data.openapi.ruleset as ruleset; equal(count(a), 1) }
test_disabled_policies_with_ruleset = true { assign(ruleset, {"extends": [["spego:oas", "all"]], "rules": {"openapi-tags": "off"}}); assign(a, results) with input as {} with data.openapi.ruleset as ruleset; equal(count(a), minus(count(all_policy_refs), 1)) }
test_enabled_and_disabled_policies_with_ruleset = true { assign(ruleset, {"extends": [["spego:oas", "recommended"]], "rules": {"openapi-tags": true, "path-params": "off"}}); assign(a, results) with input as {} with data.openapi.ruleset as ruleset; equal(count(a), count(recommended_policy_refs)) }
test_severity_override_with_ruleset = true { assign(ruleset, {"extends": [["spego:oas", "all"]], "rules": {"openapi-tags": "info"}}); assign(result, {"code": "openapi-tags", "message": "OpenAPI object must have non-empty \"tags\" array.", "path": ["tags"], "severity": "info", "status": "failure"}); results[result] with input as {} with data.openapi.ruleset as ruleset }
test_results_includes_both_successes_and_problems = true { assign(mock_input, {"paths": {"/users": {"get": {"responses": {"400": {}}}}}}); assign(ruleset, {"extends": ["spego:oas"]}); assign(problem_count, count(problems)) with input as mock_input with data.openapi.ruleset as ruleset; assign(success_count, count(successes)) with input as mock_input with data.openapi.ruleset as ruleset; assign(results_count, count(results)) with input as mock_input with data.openapi.ruleset as ruleset; gt(problem_count, 0); gt(success_count, 0); equal(results_count, plus(problem_count, success_count)) }