package openapi.policies["path-params"]

test_duplicate_path_patterns_in_operation_fails = true { assign(mock_input, {"paths": {"/users/{pathId}": {"get": {}}, "/users/{userId}": {"get": {}}}}); assign(result1, {"code": "path-params", "message": "Paths \"/users/{pathId}\" and \"/users/{userId}\" must not be equivalent.", "path": ["paths", "/users/{userId}"], "severity": "error"}); assign(result2, {"code": "path-params", "message": "Paths \"/users/{userId}\" and \"/users/{pathId}\" must not be equivalent.", "path": ["paths", "/users/{pathId}"], "severity": "error"}); assign(res, results) with input as mock_input; res[result1]; res[result2] }
test_duplicate_path_vars_in_pattern_fails = true { assign(mock_input, {"paths": {"/users/{userId}/{userId}": {"get": {}}}}); assign(result, {"code": "path-params", "message": "Path \"/users/{userId}/{userId}\" must not use parameter \"{userId}\" multiple times.", "path": ["paths", "/users/{userId}/{userId}"], "severity": "error"}); results[result] with input as mock_input }
test_path_parameter_is_not_required_fails = true { assign(mock_input, {"paths": {"/users/{userId}": {"parameters": [{"in": "path", "name": "userId"}]}}}); assign(result, {"code": "path-params", "message": "Path parameter \"userId\" must have \"required\" property that is set to \"true\".", "path": ["paths", "/users/{userId}", "parameters", "0"], "severity": "error"}); results[result] with input as mock_input }
test_path_parameter_duplicate_name_fails = true { assign(mock_input, {"paths": {"/users/{userId}": {"parameters": [{"in": "path", "name": "userId", "required": true}, {"in": "path", "name": "userId", "required": true}]}}}); assign(result1, {"code": "path-params", "message": "Path parameter \"userId\" must not be defined multiple times.", "path": ["paths", "/users/{userId}", "parameters", "1"], "severity": "error"}); assign(result2, {"code": "path-params", "message": "Path parameter \"userId\" must not be defined multiple times.", "path": ["paths", "/users/{userId}", "parameters", "0"], "severity": "error"}); assign(res, results) with input as mock_input; res[result1]; res[result2] }
test_path_parameter_in_operation_is_not_required_fails = true { assign(mock_input, {"paths": {"/users/{userId}": {"get": {"parameters": [{"in": "path", "name": "userId"}]}}}}); assign(result, {"code": "path-params", "message": "Path parameter \"userId\" must have \"required\" property that is set to \"true\".", "path": ["paths", "/users/{userId}", "get", "parameters", "0"], "severity": "error"}); results[result] with input as mock_input }
test_path_parameter_in_operation_duplicate_name_fails = true { assign(mock_input, {"paths": {"/users/{userId}": {"get": {"parameters": [{"in": "path", "name": "userId", "required": true}, {"in": "path", "name": "userId", "required": true}]}}}}); assign(result1, {"code": "path-params", "message": "Path parameter \"userId\" must not be defined multiple times.", "path": ["paths", "/users/{userId}", "get", "parameters", "1"], "severity": "error"}); assign(result2, {"code": "path-params", "message": "Path parameter \"userId\" must not be defined multiple times.", "path": ["paths", "/users/{userId}", "get", "parameters", "0"], "severity": "error"}); assign(res, results) with input as mock_input; res[result1]; res[result2] }
test_defined_parameter_not_in_path_fails = true { assign(mock_input, {"paths": {"/users": {"get": {"parameters": [{"in": "path", "name": "userId", "required": true}]}}}}); assign(result, {"code": "path-params", "message": "Parameter \"userId\" must be used in path \"/users\".", "path": ["paths", "/users", "get", "parameters", "0"], "severity": "error"}); results[result] with input as mock_input }
test_undefined_path_parameter_fails = true { assign(mock_input, {"paths": {"/users/{userId}": {"get": {}}}}); assign(result, {"code": "path-params", "message": "Operation must define parameter \"{userId}\" as expected by path \"/users/{userId}\".", "path": ["paths", "/users/{userId}", "get"], "severity": "error"}); results[result] with input as mock_input }
test_path_parameter_is_required_succeeds = true { assign(mock_input, {"paths": {"/users/{userId}": {"parameters": [{"in": "path", "name": "userId", "required": true}]}}}); assign(a, results) with input as mock_input; equal(count(a), 0) }